// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userID     Int      @id @default(autoincrement())
  username   String
  email      String  @unique 
  password   String
  coffees    Coffees[]
  createdCoffees UserCreatedCoffees[]
  orders     Orders[]
}

model Coffees {
  coffeesID        Int       @id @default(autoincrement())
  userID          Int
  user            Users      @relation(fields: [userID], references: [userID])
  coffee_title    String
  description     String
  size            String
  price           Float
  image           String
  Coffees_Order    Coffee_Order[]
}

model UserCreatedCoffees {
  userCreatedCoffeeID    Int       @id @default(autoincrement())
  userID                 Int
  user                   Users      @relation(fields: [userID], references: [userID])
  custom_coffee_title    String
  description            String
  size                   String
  price                  Float
  flavorID               Int
  toppingID              Int
  milkTypeID             Int
  UserCreatedCoffees_Order UserCreatedCoffees_Order[]
  Flavors                Flavors   @relation(fields: [flavorID], references: [flavorID])
  Toppings               Toppings  @relation(fields: [toppingID], references: [toppingID])
  MilkTypes              MilkTypes @relation(fields: [milkTypeID], references: [milkTypeID])
}

model Flavors {
  flavorID     Int      @id @default(autoincrement())
  flavor_name  String
  createdCoffees UserCreatedCoffees[]
}

model Toppings {
  toppingID      Int      @id @default(autoincrement())
  topping_name   String
  createdCoffees UserCreatedCoffees[]
}

model MilkTypes {
  milkTypeID    Int      @id @default(autoincrement())
  milk_type     String
  createdCoffees UserCreatedCoffees[]
}

model Orders {
  orderID      Int        @id @default(autoincrement())
  userID       Int
  user         Users       @relation(fields: [userID], references: [userID])
  quantity     Int
  totalPrice   Float
  orderDate    DateTime
  status       String
  Coffee_Order Coffee_Order[]
  UserCreatedCoffees_Order UserCreatedCoffees_Order[]
}

model Coffee_Order {
  coffee_orderID  Int       @id @default(autoincrement())
  coffeesID        Int
  coffee          Coffees    @relation(fields: [coffeesID], references: [coffeesID])
  orderID         Int
  order           Orders     @relation(fields: [orderID], references: [orderID])
}

model UserCreatedCoffees_Order {
  userCreatedCoffee_orderID Int       @id @default(autoincrement())
  userCreatedCoffeeID       Int
  userCreatedCoffee         UserCreatedCoffees @relation(fields: [userCreatedCoffeeID], references: [userCreatedCoffeeID])
  orderID                   Int
  order                     Orders            @relation(fields: [orderID], references: [orderID])
}